{"version":3,"sources":["redux/reducers/userReducer.js","redux/reducers/rootReducer.js","redux/store.js","components/NavBar/NavBar.js","components/ErrorPanel/ErrorPanel.js","components/Posts/SmallVotes/SmallVotes.js","components/Posts/PostPreview/PostPreview.js","components/Posts/PostCollection/PostCollection.js","components/Frontpage/Frontpage.js","components/SignUp/SignUp.js","components/SignIn/SignIn.js","components/Profile/Profile.js","redux/actions/userActions.js","components/TextArea/TextArea.js","components/Posts/CreatePost/CreatePost.js","components/Subreddits/SubscribeButton/SubscribeButton.js","components/Subreddits/Subreddit/Subreddit.js","components/Posts/Votes/Votes.js","components/Comments/CreateReply/CreateReply.js","components/Comments/Reply/Reply.js","components/Comments/Comment/Comment.js","components/Comments/CommentCollection/CommentCollection.js","components/Comments/CreateComment/CreateComment.js","components/Posts/Post/Post.js","components/Subreddits/SubredditList/SubredditList.js","containers/RootContainer.js","App.js","index.js"],"names":["initalState","text","userReducer","state","action","payload","type","rootReducer","combineReducers","user","store","createStore","NavBar","history","useHistory","className","onClick","push","localStorage","id","removeItem","SignUpError","message","useState","show","showPanel","Modal","Header","Title","Body","Footer","Button","variant","window","location","reload","SmallVotes","postId","votes","value","error","setError","status","setStatus","currentVotes","setVotes","useEffect","submitVote","a","fetch","method","headers","body","JSON","stringify","userId","vote","response","json","parsedRes","console","log","Error","upvoteHandler","downvoteHandler","PostPreview","subreddit","title","date","lastVote","to","slice","PostCollection","frontpage","profile","previews","setPreviews","orderByVotes","setOrderBy","limit","setLimit","fetchSubredditPreviews","sub","subredditName","fetchProfilePreviews","p","profileUser","fetchFrontpageFeed","sortByVote","map","i","length","Frontpage","SignUp","password","setPassword","email","setEmail","setUser","handleSubmit","parsedResponse","setItem","nick","Container","Row","Col","sm","Card","htmlFor","name","placeholder","onChange","event","target","SignIn","Profile","subscriptions","setSubscriptions","useParams","fetchSubscription","username","e","setText","connect","dispatch","cols","rows","charsLeft","calculateChars","maxLength","toString","withRouter","post","setSubreddit","setTitle","SubscribeButton","isSubscribed","subscribed","setSubscription","postSubscription","boolean","subscription","buttonHandler","Subreddit","description","users","createdAt","subredditData","setSubData","fetchSubreddit","fluid","style","display","cursor","Votes","percentage","setPercentage","fetchVotes","reply","commentId","prevCommentId","Reply","replyData","setReplyData","getReplies","data","newCommentId","created","canDelete","Comment","parentHidden","hidden","setHidden","setReply","handleDelete","CommentCollection","comments","setComments","fetchComments","c","comment","Post","postUser","postTitle","postText","postDate","postInfo","setPost","fetchPost","SubredditList","subreddits","setSubreddits","fetchSubreddits","s","info","RootContainer","path","component","exact","CreatePost","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f850857c.chunk.js","sourcesContent":["const initalState = {\r\n    text: ''\r\n}\r\n\r\nconst userReducer = (state = initalState, action) => {\r\n    const {payload} = action;\r\n    switch(action.type) {\r\n        case 'SET_TEXT':\r\n            return {\r\n                ...state,\r\n                text: payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default userReducer;","import { combineReducers } from 'redux';\r\nimport userReducer from './userReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    user: userReducer\r\n})\r\n\r\nexport default rootReducer;\r\n\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React from \"react\";\r\nimport './NavBar.css';\r\n\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst NavBar = () => {\r\n    const history = useHistory();\r\n    \r\n    const handleSignIn = () => {\r\n        if(!localStorage.id) {\r\n            return history.push('/reddit-clone-client/signin');\r\n        } else {\r\n            localStorage.removeItem('id');\r\n            return history.push('/reddit-clone-client/signin');\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='nv-container'>\r\n            <div \r\n                className='readit-logo'\r\n                onClick={() => history.push('/')}\r\n            >\r\n                readIt\r\n            </div>\r\n            <p className='nv-separator'>{\" || \"}</p>\r\n            <div \r\n                className='nv-subreddits'\r\n                onClick={() => history.push('/reddit-clone-client/subreddits')}\r\n                >\r\n                {`subreddits`}\r\n            </div>\r\n\r\n            <div className='nav-end'>\r\n                <p \r\n                    className='nav-user'\r\n                    onClick={() => history.push(`/reddit-clone-client/user/${localStorage.user}`)}\r\n                >\r\n                    {!localStorage.id ? null : localStorage.user}\r\n                </p>\r\n\r\n\r\n                <div\r\n                    className='navbar-button'\r\n                    onClick={() => handleSignIn()}\r\n                >\r\n                {\r\n                    !localStorage.id ? 'Sign In' : 'Sign Out'\r\n                }\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React, {useState} from 'react';\r\nimport './ErrorPanel.css';\r\n\r\nimport {Modal, Button} from 'react-bootstrap';\r\n\r\nconst SignUpError = ({message}) => {\r\n    const [show, showPanel] = useState(true)\r\n\r\n    const handleClick = () => {\r\n        showPanel(false);\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} className='panel-modal'>\r\n            <Modal.Header className='panel-title'>\r\n                <Modal.Title className=''>Error</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='panel-message'>{!message ? 'Unknown error. Please try again.' : message}</Modal.Body>\r\n            <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={() => handleClick()}>\r\n                Try Again\r\n            </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n}\r\n\r\nexport default SignUpError;","import React, { useState, useEffect } from 'react';\r\n\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\n\r\nimport './SmallVotes.css';\r\n\r\nconst SmallVotes = ({postId, votes, value}) => {\r\n    //State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n    const [status, setStatus] = useState(null);\r\n    const [currentVotes, setVotes] = useState(0);\r\n\r\n    //useEffect\r\n    useEffect(() => {\r\n        setStatus(value);\r\n        setVotes(votes);\r\n    }, [setVotes])\r\n\r\n    //Submit votes\r\n    const submitVote = async (postId, value) => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/post/vote', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    userId: localStorage.id,\r\n                    postId: postId,\r\n                    vote: value\r\n                })\r\n            })\r\n\r\n            const parsedRes = await response.json();\r\n            if(response.status !== 200) {\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedRes.message\r\n                })\r\n            } \r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw new Error();\r\n        }\r\n    } \r\n\r\n    //Vote Handlers\r\n    const upvoteHandler = async () => {\r\n        await submitVote(postId, true);\r\n        switch(status) {\r\n            //Already upvoted\r\n            case true:\r\n                setVotes(currentVotes - 1);\r\n                return setStatus(null);\r\n\r\n            //Already Downvoted\r\n            case false:\r\n                setVotes(currentVotes + 2);\r\n                return setStatus(true);\r\n\r\n            //No previous vote\r\n            case null:\r\n                setVotes(currentVotes + 1);\r\n                return setStatus(true);\r\n        \r\n            //Shouldn't happen\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    const downvoteHandler = async () => {\r\n        await submitVote(postId, false);\r\n        switch(status) {\r\n            //Already upvoted\r\n            case true:\r\n                setVotes(currentVotes - 2);\r\n                return setStatus(false);\r\n\r\n            //Already Downvoted\r\n            case false:\r\n                setVotes(currentVotes + 1);\r\n                return setStatus(null);\r\n\r\n            //No previous vote\r\n            case null:\r\n                setVotes(currentVotes - 1);\r\n                return setStatus(false);\r\n        \r\n            //Shouldn't happen\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"small-vote-body\">\r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n            <p \r\n                className={status === true ? 'small-up' : '' }\r\n                onClick={!localStorage.id ? null : () => upvoteHandler()}\r\n            >\r\n                ↑\r\n            </p>\r\n            <p className=\"small-votes\">{currentVotes}</p>\r\n            <p \r\n                className={status === false ? 'small-down' : '' }\r\n                onClick={!localStorage.id ? null : () => downvoteHandler()}\r\n            >\r\n                ↓\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SmallVotes;","import React from 'react';\r\n\r\nimport SmallVotes from '../SmallVotes/SmallVotes';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './PostPreview.css';\r\n\r\nconst PostPreview = ({postId, subreddit, title, user, date, votes, lastVote}) => {\r\n    return(\r\n        <div className='preview-container'>\r\n            <div className='preview-box'>\r\n                <SmallVotes \r\n                    votes={votes}\r\n                    value={lastVote}\r\n                    postId={postId}\r\n                />\r\n\r\n                <div className='preview-title-details'>\r\n                    <Link \r\n                        className='preview-title'\r\n                        to={`/reddit-clone-client/r/${subreddit}/post=${postId}`}>\r\n                        {title}\r\n                    </Link>\r\n\r\n                    <br />\r\n\r\n                    <p className='preview-details'>\r\n                    submitted to <Link to={`/reddit-clone-client/r/${subreddit}`}>{subreddit + \" \"}</Link> \r\n                    by <Link to={`/reddit-clone-client/user/${user}`}>{user}</Link> {`at ${date.slice(0,10) + \" \" + date.slice(11, 19)}`} \r\n                    </p>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostPreview;","import React, { useState, useEffect } from 'react';\r\n\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\nimport PostPreview  from '../PostPreview/PostPreview';\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport './PostCollection.css';\r\n\r\nconst PostCollection = ({frontpage, subreddit, profile}) => {\r\n    //Error State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n\r\n    //Post collection state\r\n    const [previews, setPreviews] = useState([]);\r\n    const [orderByVotes, setOrderBy] = useState(false)\r\n    const [limit, setLimit] = useState(10);\r\n\r\n    //useEffect Subreddit Function\r\n    const fetchSubredditPreviews = async(sub) => {\r\n        setPreviews([]);\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/post/previews', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    userId: localStorage.id,\r\n                    subredditName: sub,\r\n                    limit: limit,\r\n                    orderByVotes: orderByVotes\r\n                })\r\n            })\r\n            const parsedRes = await response.json();\r\n            if(response.status !== 200) {\r\n                console.log('ERROR');\r\n                return setError({error: true, message: parsedRes.message})\r\n            }\r\n            console.log(parsedRes.body)\r\n            return setPreviews(parsedRes.body);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    //Profile Function\r\n    const fetchProfilePreviews = async(p) => {\r\n        setPreviews([]);\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/user/posts', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    userId: localStorage.id,\r\n                    profileUser: p,\r\n                    limit: limit,\r\n                    orderByVotes: orderByVotes\r\n                })\r\n            })\r\n\r\n            const parsedRes = await response.json();\r\n            if(response.status !== 200) {\r\n                console.log('ERROR');\r\n                return setError({error: true, message: parsedRes.message})\r\n            }\r\n            console.log(parsedRes)\r\n            return setPreviews(parsedRes.body);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    //Profile Function\r\n    const fetchFrontpageFeed = async() => {\r\n        setPreviews([]);\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/frontpage/feed', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    userId: localStorage.id,\r\n                    limit: limit,\r\n                    sortByVote: orderByVotes\r\n                })\r\n            })\r\n            const parsedRes = await response.json();\r\n            if(response.status !== 200) {\r\n                console.log('ERROR');\r\n                return setError({error: true, message: parsedRes.message})\r\n            }\r\n            console.log(parsedRes.body)\r\n            return setPreviews(parsedRes.body);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }    \r\n\r\n    //useEffect\r\n    useEffect(() => {\r\n        if(subreddit) {\r\n            return fetchSubredditPreviews(subreddit);\r\n        } else if(profile) {\r\n            return fetchProfilePreviews(profile);\r\n        } else if(frontpage) {\r\n            return fetchFrontpageFeed();\r\n        }\r\n\r\n    }, [limit, orderByVotes]);\r\n\r\n    return (\r\n        <div>\r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n            <div>\r\n                <Button \r\n                    className='preview-button'\r\n                    onClick={() => setOrderBy(false)}>\r\n                    New\r\n                </Button>\r\n                <Button \r\n                    className='preview-button'\r\n                    onClick={() => setOrderBy(true)}>\r\n                    Top\r\n                </Button>\r\n            </div>\r\n            {\r\n                previews ?\r\n                    previews.map((p, i) => (\r\n                        <PostPreview\r\n                            key = {i}\r\n                            postId = {p.postId}\r\n                            subreddit = {p.subreddit}\r\n                            title = {p.title}\r\n                            user = {p.user}\r\n                            votes = {p.votes}\r\n                            lastVote = {p.lastVote}\r\n                            date = {p.date}\r\n                        />\r\n                    ))\r\n                : null\r\n            }\r\n\r\n            {\r\n                previews.length < 10 \r\n                    ? null            \r\n                    :    \r\n                        <Button\r\n                            className='preview-button mb-5'\r\n                            onClick = {() => setLimit(limit + 10)}\r\n                        >\r\n                            Load More\r\n                        </Button>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostCollection;","import React from \"react\";\r\nimport PostCollection from \"../Posts/PostCollection/PostCollection\";\r\n\r\nconst Frontpage = () => {\r\n    return (\r\n        <div className='m-5'>\r\n            <PostCollection frontpage={true} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Frontpage;","import React, {useState} from 'react';\r\nimport { useHistory, Link } from 'react-router-dom';\r\n\r\nimport ErrorPanel from '../ErrorPanel/ErrorPanel';\r\n\r\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap';\r\nimport './SignUp.css';\r\n\r\nconst SignUp = () => {\r\n    const history = useHistory();\r\n\r\n    //State\r\n    const [password, setPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [user, setUser] = useState('');\r\n    const [error, setError] = useState({error: false, message: ''});\r\n\r\n\r\n    //Handlers\r\n    const handleUser = (event) => {\r\n        return setUser(event.target.value);\r\n    }\r\n\r\n    const handleEmail = (event) => {\r\n        return setEmail(event.target.value);\r\n    }\r\n\r\n    const handlePassword = (event) => {\r\n        return setPassword(event.target.value);\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n\r\n        try {\r\n\r\n            if (user.length === 0 || email.length === 0 || password.length === 0) {\r\n                return setError({\r\n                    error: true,\r\n                    message: 'You must complete all fields in order to sign up.'\r\n                })\r\n            }\r\n            \r\n            const response = await fetch('https://readit-server-1.herokuapp.com/auth/signup', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    user: user,\r\n                    email: email,\r\n                    password: password\r\n                })\r\n            })\r\n    \r\n            const parsedResponse = await response.json()\r\n    \r\n            if(response.status !== 200) {\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedResponse\r\n                })\r\n            } else {\r\n                localStorage.setItem('id', parsedResponse.id);\r\n                localStorage.setItem('user', parsedResponse.nick);\r\n                return history.push('/');\r\n            }\r\n            \r\n        } catch(error) {\r\n            console.log('ERROR:', error);\r\n            throw new Error();\r\n        }\r\n    }\r\n\r\n\r\n    return(\r\n        <Container className='center signup'>\r\n            <Row>\r\n                <Col sm={3}></Col>\r\n                <Col sm={6}>\r\n                    <h1 className='signup-title-box'><span className='signup-title rounded'>Sign Up</span></h1>\r\n                    { error.error ? <ErrorPanel message={error.message} /> : null}\r\n                    <Card className='signup-card'>\r\n                        <form>\r\n                            <label htmlFor=\"input-user\" className=\"signup-subtitle\">User</label>\r\n                            <input \r\n                                className='form-input'\r\n                                type=\"text\" \r\n                                name='user'\r\n                                value={user}\r\n                                placeholder=\"User\"\r\n                                onChange={handleUser} \r\n                            ></input>\r\n\r\n                            <label htmlFor=\"input-email\" className=\"signup-subtitle\">E-mail</label>\r\n                            <input \r\n                                className='form-input'\r\n                                type=\"email\" \r\n                                name='email'\r\n                                value={email}\r\n                                placeholder=\"E-mail\"\r\n                                onChange={handleEmail} \r\n                            ></input>   \r\n\r\n                            <label htmlFor=\"input-password\" className=\"signup-subtitle\">Password</label>\r\n                            <input \r\n                                className='form-input'\r\n                                name='password'\r\n                                value={password}\r\n                                type=\"password\" \r\n                                placeholder=\"Password\"\r\n                                onChange={handlePassword} \r\n                            ></input> \r\n\r\n                            <Button \r\n                                className='mb-4 signup-button'\r\n                                variant=\"secondary\"\r\n                                onClick={() => handleSubmit()}>\r\n                                Sign Up\r\n                            </Button>\r\n            \r\n                            <Link to='/reddit-clone-client/signin'>I already have an account</Link>\r\n\r\n                        </form>\r\n                    </Card>\r\n                </Col>\r\n                <Col sm={3}></Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SignUp;","import React, { useState } from 'react';\r\nimport { useHistory , Link } from 'react-router-dom';\r\n\r\nimport ErrorPanel from '../ErrorPanel/ErrorPanel';\r\n\r\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap';\r\nimport './SignIn.css';\r\n\r\n\r\nconst SignIn = () => {\r\n    const history = useHistory();\r\n\r\n    //State\r\n    const [user, setUser] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState({error: false, message: ''});\r\n\r\n    //Handlers\r\n    const handleUser = (event) => {\r\n        return setUser(event.target.value);\r\n    }\r\n\r\n    const handlePassword = (event) => {\r\n        return setPassword(event.target.value);\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            if (user.length === 0 || password.length === 0) {\r\n                return setError({\r\n                    error: true,\r\n                    message: 'You must complete all fields in order to sign in.'\r\n                })\r\n            }\r\n            \r\n            const response = await fetch('https://readit-server-1.herokuapp.com/auth/signin', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    user: user,\r\n                    password: password\r\n                })\r\n            })\r\n    \r\n            const parsedResponse = await response.json()\r\n\r\n            if(response.status !== 200) {\r\n                return setError({error: true, message: parsedResponse.message});\r\n\r\n            } else {\r\n                localStorage.setItem('id', parsedResponse.id);\r\n                localStorage.setItem('user', parsedResponse.nick);\r\n                history.push('/');\r\n            }\r\n            \r\n        } catch(error) {\r\n            console.log('ERROR:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Container className='center signin'>\r\n            <Row>\r\n                <Col sm={3}></Col>\r\n\r\n                <Col sm={6}>\r\n                    { error.error ? <ErrorPanel message={error.message} /> : null}\r\n\r\n                    <h1 className='signin-title-box'><span className='signin-title rounded'>Sign In</span></h1>\r\n                    <Card className='signin-card'>\r\n                        <form>\r\n                            <label htmlFor=\"input-user\" className=\"signin-subtitle\">User</label>\r\n                            <input \r\n                                className='form-input'\r\n                                type=\"text\" \r\n                                name='user'\r\n                                value={user}\r\n                                placeholder=\"User\"\r\n                                onChange={handleUser} \r\n                            ></input>\r\n\r\n                            <label htmlFor=\"input-password\" className=\"signin-subtitle\">Password</label>\r\n                            <input \r\n                                className='form-input'\r\n                                name='password'\r\n                                value={password}\r\n                                type=\"password\" \r\n                                placeholder=\"Password\"\r\n                                onChange={handlePassword} \r\n                            ></input> \r\n\r\n                            <Button \r\n                                className='mb-4 signin-button'\r\n                                variant=\"secondary\"\r\n                                onClick={() => handleSubmit()}>\r\n                                Sign In\r\n                            </Button>\r\n\r\n                            <Link to='/reddit-clone-client/signup'>I don't have an account</Link>\r\n\r\n                        </form>\r\n                    </Card>\r\n                </Col>\r\n                <Col sm={3}></Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SignIn;","import React, {useState, useEffect} from \"react\";\r\nimport { useParams } from \"react-router\";\r\n\r\nimport ErrorPanel from '../ErrorPanel/ErrorPanel';\r\nimport PostCollection from \"../Posts/PostCollection/PostCollection\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport './Profile.css'\r\n\r\nconst Profile = () => {\r\n    //Error State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n\r\n    //Subscriptions state\r\n    const [subscriptions, setSubscriptions] = useState([]);\r\n\r\n    //Profile username\r\n    const {user} = useParams();\r\n    if(!user) {\r\n        setError({\r\n            error: true,\r\n            message: 'User does not exist'\r\n        })\r\n    }\r\n    \r\n    //useEffect function\r\n    const fetchSubscription = async() => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/subreddit/subscriptions', {\r\n                method: 'POST',\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    username: user\r\n                })\r\n            })\r\n\r\n            const parsedResponse = await response.json();\r\n            console.log(parsedResponse)\r\n            if(response.status !== 200) {\r\n                console.log(parsedResponse.message)\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedResponse.message\r\n                })\r\n\r\n            } else {\r\n                console.log(parsedResponse.body)\r\n                setSubscriptions(parsedResponse.body);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n    useEffect(() => fetchSubscription(), []);\r\n\r\n    return(\r\n        <> \r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n            <div className='user-profile'>\r\n\r\n                <div className='user-posts'>\r\n                    <p \r\n                        onClick={() => window.location.reload()}\r\n                        className='profile-title'\r\n                        >{`Posts from ${user}`}\r\n                    </p>\r\n                    <PostCollection profile = {user} />\r\n                </div>\r\n\r\n                <div className='user-subscriptions'>\r\n                    <div className='user-subscriptions-box'>\r\n                        <p>A member of: </p>\r\n                        <p>\r\n                            {\r\n                                subscriptions.map((e, i) => (\r\n                                    <Link \r\n                                        className={'user-subscription'}\r\n                                        key={i} \r\n                                        to={`/reddit-clone-client/r/${e}`}>\r\n                                            {e}\r\n                                    </Link>\r\n                                ))   \r\n                            }\r\n                        </p>\r\n\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile;","export const setText = (text) => ({\r\n    type: 'SET_TEXT',\r\n    payload: text\r\n})","import React, { useState } from \"react\";\r\nimport { connect } from 'react-redux'\r\nimport { setText } from \"../../redux/actions/userActions\";\r\n\r\nimport './TextArea.css'\r\n\r\nconst TextArea = ({title, name, limit, cols, rows, className, setText, text}) => {\r\n\r\n    const [charsLeft, calculateChars] = useState(limit);\r\n\r\n    const handleChars = (e) => {\r\n        calculateChars(limit - e.target.value.length);\r\n        setText(e.target.value)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className='text-title-and-char'>\r\n                <label \r\n                    htmlFor={name} \r\n                    className=\"text-label\">\r\n                        {title}\r\n                </label>\r\n                <p className={charsLeft <= limit / 4 ? 'char-warning' : 'char-count'}>{charsLeft}</p>\r\n            </div>\r\n\r\n            <textarea                         \r\n                name={name}\r\n                maxLength={limit.toString()}\r\n                cols={cols} \r\n                rows={rows}\r\n                value={text}\r\n                className={className}\r\n                onChange={handleChars}>\r\n            </textarea>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    text: state.user.text\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setText: (text) => dispatch(setText(text))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TextArea);","import React, {useState, useEffect} from 'react';\r\n\r\n//Router\r\nimport { withRouter } from 'react-router';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n//Redux\r\nimport {connect} from 'react-redux'\r\nimport { setText } from '../../../redux/actions/userActions';\r\n\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\nimport TextArea from '../../TextArea/TextArea';\r\n\r\n//Css\r\nimport { Button } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router';\r\nimport './CreatePost.css'\r\n\r\nconst CreatePost = ({history, post, setText}) => {\r\n    //Params\r\n    const {subredditName} = useParams();\r\n\r\n    //Error State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n\r\n    //Subscriptions, subreddit, post States\r\n    const [subscriptions, setSubscriptions] = useState([]);\r\n    const [subreddit, setSubreddit] = useState(\"\");\r\n    const [title, setTitle] = useState(\"\");\r\n\r\n    //useEffect function\r\n    const fetchSubscription = async() => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/subreddit/subscriptions', {\r\n                method: 'POST',\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    userId: localStorage.id\r\n                })\r\n            })\r\n\r\n            const parsedResponse = await response.json();\r\n\r\n            if(response.status !== 200) {\r\n                console.log(parsedResponse.message)\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedResponse.message\r\n                })\r\n\r\n            } else {\r\n                setSubscriptions(parsedResponse.body);\r\n                setSubreddit(subredditName);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n    useEffect(() => fetchSubscription(), []);\r\n\r\n    //Event Handlers\r\n    const handleSubreddit = (e) => {\r\n        setSubreddit(e.target.value)\r\n    }\r\n\r\n    const handleTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }   \r\n\r\n    const handleSubmit = async() => {\r\n        try {\r\n\r\n            if (subreddit.length === 0 || title.length === 0 || post.length === 0) {\r\n                return setError({\r\n                    error: true,\r\n                    message: 'You must select a subreddit and complete all fields in order to post.'\r\n                })\r\n            }\r\n\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/post/submit', {\r\n                method: 'POST',\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    id: localStorage.id,\r\n                    title: title,\r\n                    post: post,\r\n                    subreddit: subreddit\r\n                })\r\n            })\r\n\r\n            const parsedResponse = await response.json();\r\n\r\n            if(response.status !== 200) {\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedResponse.message\r\n                })\r\n            \r\n            } else {\r\n                setText('');\r\n                history.push(`/reddit-clone-client/r/${subreddit}/post=${parsedResponse.postId}`); \r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw new Error();\r\n        }\r\n    }\r\n\r\n    //Not logged in\r\n    if(!localStorage.id) {\r\n        return <Redirect to='/reddit-clone-client/signin'/>;\r\n    } \r\n    \r\n    return(\r\n        <> \r\n            <div className='container-fluid create-post'>\r\n                {/* Error Panel */}\r\n                { error.error ? <ErrorPanel message={error.message} /> : null}\r\n\r\n                <div className='create-post-form'>\r\n                    <form>\r\n                        <div className='select-subreddit'>\r\n                            <label htmlFor=\"subreddits\" className='select-subreddit-label'>Choose A Subreddit:</label>\r\n                            <select value={subreddit} onChange={handleSubreddit}>\r\n                                {\r\n                                    subscriptions.map((e, i) => <option key={i}>{e}</option>)\r\n                                }\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className='create-post-input container-fluid'>\r\n\r\n                            <label htmlFor=\"title-input\" className=\"title-label\">Title</label>\r\n                            <input \r\n                                className='title-input'\r\n                                type=\"text\" \r\n                                name='title'\r\n                                value={title}\r\n                                onChange={handleTitle} \r\n                            ></input>\r\n                            \r\n                    \r\n                            <TextArea \r\n                                title='Post'\r\n                                name='post-input'\r\n                                limit={10000}\r\n                                cols=\"50\"\r\n                                rows=\"10\"\r\n                                className='post-input'\r\n                            />\r\n\r\n                            <Button \r\n                                className='post-button'\r\n                                variant=\"secondary\"\r\n                                onClick={handleSubmit}>\r\n                                    Submit\r\n                            </Button>\r\n                        </div>\r\n\r\n\r\n\r\n                    </form>\r\n                </div>\r\n            </div>                \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    post: state.user.text\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setText: (text) => dispatch(setText(text))\r\n})\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreatePost));","import React, {useEffect, useState} from 'react';\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport { useParams } from 'react-router-dom';\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\n\r\nimport './SubscribeButton.css';\r\n\r\nconst SubscribeButton = ({isSubscribed}) => {\r\n    //Params\r\n    const {subredditName} = useParams();\r\n\r\n    //State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n    const [subscribed, setSubscription] = useState(isSubscribed);\r\n    \r\n    //useEffect\r\n    useEffect(() => setSubscription(isSubscribed), [isSubscribed])\r\n\r\n    const postSubscription = async(boolean) => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/subreddit/subscribe', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    subreddit: subredditName,\r\n                    userId: localStorage.id,\r\n                    subscription: boolean\r\n                })\r\n            })\r\n\r\n            const parsedRes = await response.json();\r\n            console.log(parsedRes)\r\n            if(response.status !==200) {\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedRes.message\r\n                })\r\n            }\r\n            console.log(parsedRes.message);\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n            throw err;\r\n        }\r\n\r\n    }\r\n\r\n    const buttonHandler = () => {\r\n        switch(subscribed) {\r\n            case true:\r\n                postSubscription(false);\r\n                setSubscription(false);\r\n                break;\r\n            case false:\r\n                postSubscription(true);\r\n                setSubscription(true);\r\n                break;\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n            <Button\r\n                className={subscribed ? 'join btn-primary shadow-none' : 'leave btn-danger shadow-none'}\r\n                onClick={() => buttonHandler()}\r\n                >\r\n                <p>{!subscribed ? 'join' : 'leave'}</p>\r\n            </Button>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default SubscribeButton;","import React, {useEffect, useState} from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\nimport SubscribeButton from \"../SubscribeButton/SubscribeButton\";\r\nimport PostCollection from \"../../Posts/PostCollection/PostCollection\";\r\n\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport './Subreddit.css';\r\n\r\n\r\nconst Subreddit = () => {\r\n    //State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n    const [subredditData, setSubData] = useState({\r\n        name: '',\r\n        description: '',\r\n        users: 0,\r\n        createdAt: '',\r\n        isSubscribed: false\r\n    });\r\n\r\n    //Subreddit url param\r\n    const {subredditName} = useParams();\r\n\r\n    //useEffect function\r\n    const fetchSubreddit = async (subredditName) => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/subreddit/data', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    subredditName,\r\n                    userId: localStorage.id\r\n                })\r\n            })\r\n    \r\n            const parsedRes = await response.json()\r\n            if(response.status !== 200) {\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedRes.message\r\n                })\r\n            }\r\n    \r\n            const {subreddit, description, users, date, subscription} = parsedRes.body;\r\n            setSubData({\r\n                name: subreddit,\r\n                description,\r\n                users,\r\n                createdAt: date,\r\n                isSubscribed: subscription\r\n            })\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n            throw err;\r\n        }\r\n    }\r\n    useEffect(() => fetchSubreddit(subredditName), []);\r\n\r\n    return(\r\n        <Container fluid className=\"subreddit-container\">\r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n            \r\n            <div className='subreddit-title'>\r\n                <h1 \r\n                    className=\"divider\"\r\n                    onClick={() => window.location.reload()}\r\n                >\r\n                    {subredditData.name}\r\n                </h1>\r\n            </div>\r\n\r\n            <Row>\r\n                <Col sm={9}>\r\n                    <PostCollection subreddit = {subredditName} />\r\n                </Col>\r\n\r\n                <Col sm={3} className='subreddit-info'>\r\n                    <div className='subscribe-and-title '>\r\n                        <h2 \r\n                            style={{display: 'inline', cursor: 'pointer'}}\r\n                            onClick={() => window.location.reload()}\r\n                        >\r\n                            {subredditData.name}\r\n                        </h2>\r\n                        \r\n                        {\r\n                            !localStorage.id ? null \r\n                            : <SubscribeButton isSubscribed={subredditData.isSubscribed} />\r\n                        }\r\n                        \r\n\r\n                    </div>\r\n\r\n                    <hr className=\"divider\"/>\r\n                        <p>{subredditData.users} readers</p>\r\n                        <p>{subredditData.description}</p>\r\n                    <hr className=\"divider\"/>\r\n                        <p>created at {subredditData.createdAt.slice(0, 10)}</p>\r\n                    <hr className=\"divider\"/>\r\n                        <Link to={`/reddit-clone-client/submit/${subredditName}`}>Submit a New Post</Link>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Subreddit;","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\n\r\nimport './Votes.css';\r\n\r\nconst Votes = () => {\r\n\r\n    //State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n    const [status, setStatus] = useState(null);\r\n    const [currentVotes, setVotes] = useState(0);\r\n    const [percentage, setPercentage] = useState(null);\r\n\r\n    //Params\r\n    const userId = localStorage.id;\r\n    const {postId} = useParams();\r\n\r\n    //useEffect function\r\n    const fetchVotes = async() => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/post/votes', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    userId: userId,\r\n                    postId: postId\r\n                })\r\n            })\r\n\r\n            const parsedRes = await response.json();\r\n\r\n            if(response.status !== 200) {\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedRes.message\r\n                })\r\n            }\r\n            setStatus(parsedRes.body.status);\r\n            setVotes(parsedRes.body.votes);\r\n            setPercentage(parsedRes.body.percentage);\r\n            return;\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    useEffect(() => fetchVotes(), [])\r\n\r\n    //Submit votes\r\n    const submitVote = async (boolean) => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/post/vote', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    userId: userId,\r\n                    postId: postId,\r\n                    vote: boolean\r\n                })\r\n            })\r\n\r\n            const parsedRes = await response.json();\r\n            if(response.status !== 200) {\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedRes.message\r\n                })\r\n            } \r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw new Error();\r\n        }\r\n    } \r\n\r\n    //Vote Handlers\r\n    const upvoteHandler = async () => {\r\n        await submitVote(true);\r\n        switch(status) {\r\n            //Already upvoted\r\n            case true:\r\n                setVotes(currentVotes - 1);\r\n                return setStatus(null);\r\n\r\n            //Already Downvoted\r\n            case false:\r\n                setVotes(currentVotes + 2);\r\n                return setStatus(true);\r\n\r\n            //No previous vote\r\n            case null:\r\n                setVotes(currentVotes + 1);\r\n                return setStatus(true);\r\n        \r\n            //Shouldn't happen\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    const downvoteHandler = async () => {\r\n        await submitVote(false);\r\n        switch(status) {\r\n            //Already upvoted\r\n            case true:\r\n                setVotes(currentVotes - 2);\r\n                return setStatus(false);\r\n\r\n            //Already Downvoted\r\n            case false:\r\n                setVotes(currentVotes + 1);\r\n                return setStatus(null);\r\n\r\n            //No previous vote\r\n            case null:\r\n                setVotes(currentVotes - 1);\r\n                return setStatus(false);\r\n        \r\n            //Shouldn't happen\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"vote-body\">\r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n            <p \r\n                className={status === true ? 'up' : '' }\r\n                onClick={!userId ? null : () => upvoteHandler()}\r\n            >\r\n                ↑\r\n            </p>\r\n            <p className=\"votes\">{currentVotes}</p>\r\n            <p \r\n                className={status === false ? 'down' : '' }\r\n                onClick={!userId ? null : () => downvoteHandler()}\r\n            >\r\n                ↓\r\n            </p>\r\n            <p\r\n                className={percentage === null ? 'percentage-hidden' : 'percentage-upvoted'}\r\n            >\r\n                {`${percentage}% upvoted`}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Votes;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\n\r\nimport TextArea from '../../TextArea/TextArea';\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport './CreateReply.css';\r\n\r\nconst CreateReply = ({commentId, reply}) => {\r\n    //Error State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n\r\n    //Submit Comment\r\n    const handleSubmit = async() => {\r\n        try {\r\n            if(!localStorage.id) {\r\n                return <Redirect to='/signin' />\r\n            }\r\n\r\n            if (reply.length === 0) {\r\n                return setError({\r\n                    error: true,\r\n                    message: 'Reply must include some text'\r\n                })\r\n            }\r\n\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/comment/submit-reply', {\r\n                method: 'POST',\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    prevCommentId: commentId,\r\n                    reply,\r\n                    userId: localStorage.id\r\n                })\r\n            })\r\n\r\n            const parsedRes = await response.json()\r\n\r\n            if(response.status !== 200) {\r\n                console.log(parsedRes.message)\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedRes.message\r\n                })\r\n            }\r\n\r\n            console.log(parsedRes.message);\r\n            window.location.reload();\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    //Not logged in\r\n    if(!localStorage.id) {\r\n        return <Redirect to='/reddit-clone-client/signin'/>;\r\n    } \r\n    \r\n    return(\r\n        <div className='create-comment'>\r\n            {/* Error Panel */}\r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n\r\n            <div className='comment-input-box'>\r\n                <TextArea \r\n                    title='Reply'\r\n                    name='comment-input'\r\n                    limit={5000}\r\n                    cols=\"5000\"\r\n                    rows=\"5\"\r\n                    className='comment-input'\r\n                />\r\n\r\n                <Button \r\n                    className='comment-button'\r\n                    variant=\"secondary\"\r\n                    onClick={handleSubmit}>\r\n                        Submit    \r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reply: state.user.text\r\n})\r\n\r\nexport default connect(mapStateToProps)(CreateReply);","import React, {useEffect, useState} from 'react';\r\n\r\nimport Comment from '../Comment/Comment';\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\n\r\nimport './Reply.css';\r\n\r\nconst Reply = ({id}) => {\r\n\r\n    //State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n    const [replyData, setReplyData] = useState(null);\r\n\r\n    //useEffect Function\r\n    const getReplies = async (commentId) => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/comment/get-replies', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    commentId,\r\n                    userId: localStorage.id\r\n                })\r\n            })\r\n\r\n            const parsedRes = await response.json();\r\n            if(response.status !== 200) {\r\n                return setError({error: true, message: parsedRes.message});\r\n            }\r\n\r\n            setReplyData(parsedRes.body)\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n    useEffect(()=> getReplies(id), []);\r\n\r\n    return (\r\n        <div>\r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n\r\n            { \r\n                !replyData \r\n                    ? null\r\n                    : replyData.map(data => (\r\n                        <Comment \r\n                            id={data.newCommentId}\r\n                            user={data.user}\r\n                            body={data.body}\r\n                            date={data.created}\r\n                            canDelete={data.canDelete}\r\n                        /> \r\n                    ))   \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reply;","import React, {useState} from 'react';\r\n\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\nimport CreateReply from '../CreateReply/CreateReply';\r\nimport Reply from '../Reply/Reply';\r\n\r\nimport './Comment.css';\r\n\r\nconst Comment = ({id, user, body, date, parentHidden, canDelete}) => {\r\n    //State\r\n    const [hidden, setHidden] = useState(false);\r\n    const [reply, setReply] = useState(false);\r\n\r\n    //Error State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n\r\n    if(parentHidden === true) {\r\n        setHidden(true);\r\n    }\r\n\r\n    const handleDelete = async() => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/comment/delete-comment', {\r\n                method: 'POST',\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    userId: localStorage.id,\r\n                    commentId: id\r\n                })\r\n            })\r\n\r\n            const parsedRes = await response.json();\r\n\r\n            if(response.status !== 200) {\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedRes.message\r\n                })\r\n            }\r\n\r\n            console.log(parsedRes.message);\r\n            window.location.reload();\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n        <div className='comment'>\r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n            <div \r\n                className='comment-hide'\r\n                onClick={!hidden ? () => setHidden(true) : () => setHidden(false)}\r\n            >\r\n                {!hidden ? <p>[-]</p> : <p>[+]</p>}\r\n            </div>\r\n\r\n            <div className='comment-box'>\r\n                <div className={!hidden ? 'comment-info' : 'comment-info info-hidden'}>\r\n                    <p className='comment-data'>\r\n                        <a className='comment-user'>{user}</a> \r\n                        {`, ${date.slice(0, 10)} T${date.slice (11, 19)}`}\r\n                        </p>\r\n                </div>\r\n\r\n                <div className={!hidden ? '' : 'comment-hidden'}>\r\n                    <p>{body}</p>\r\n                    <div className='comment-actions'>\r\n                        <p \r\n                            onClick={() => setReply(true)}\r\n                            className='comment-action'>\r\n                                reply\r\n                        </p>\r\n\r\n                        {\r\n                            canDelete === true ?\r\n                                <p \r\n                                onClick={() => handleDelete()}\r\n                                className='comment-action'>\r\n                                    delete\r\n                                </p>\r\n                            : null\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n                { reply && !hidden ? <CreateReply commentId={id} /> : null }\r\n                { !hidden ? <Reply id={id} /> : null }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment;","import React, { useState, useEffect } from 'react';\r\n\r\nimport Comment from '../Comment/Comment';\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\n\r\nimport './CommentCollection.css';\r\n\r\nconst CommentCollection = ({postId}) => {\r\n    //Error State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n    //Comment previews state\r\n    const [comments, setComments] = useState([]);\r\n\r\n    //useEffect Function\r\n    const fetchComments = async (postId) => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/comment/get-comments', {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    postId,\r\n                    userId: localStorage.id\r\n                })\r\n            })\r\n            const parsedRes = await response.json();\r\n            if(response.status !== 200) {\r\n                return setError({error: true, message: parsedRes.message});\r\n            }\r\n            setComments(parsedRes.body);\r\n            console.log(parsedRes.body)\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n\r\n    }\r\n    useEffect(() => fetchComments(postId), []);\r\n\r\n    return(\r\n        <div>\r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n            {\r\n                comments ?\r\n                    comments.map(c => (\r\n                        <Comment\r\n                            key={c.id}\r\n                            id={c.id}\r\n                            user={c.user}\r\n                            body={c.text}\r\n                            date={c.date}\r\n                            canDelete={c.canDelete}\r\n                        />\r\n                    ))\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommentCollection;","import React, { useState } from 'react';\r\n\r\n//Redux\r\nimport { connect } from 'react-redux';\r\nimport { setText } from '../../../redux/actions/userActions';\r\n\r\n//Router\r\nimport { withRouter, useHistory } from 'react-router';\r\n\r\nimport TextArea from '../../TextArea/TextArea';\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n\r\nimport './CreateComment.css';\r\n\r\nconst CreateComment = ({postId, comment, setText}) => {\r\n    //Error State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n\r\n    //History\r\n    const history = useHistory();\r\n\r\n    //Submit Comment\r\n    const handleSubmit = async() => {\r\n        try {\r\n\r\n            if (comment.length === 0) {\r\n                return setError({\r\n                    error: true,\r\n                    message: 'Comment must include some text'\r\n                })\r\n            }\r\n\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/comment/submit-comment', {\r\n                method: 'POST',\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    postId,\r\n                    comment,\r\n                    userId: localStorage.id\r\n                })\r\n            })\r\n\r\n            const parsedRes = await response.json()\r\n\r\n            if(response.status !== 200) {\r\n                console.log(parsedRes.message)\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedRes.message\r\n                })\r\n            }\r\n\r\n            setText('');\r\n            window.location.reload();\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div className='create-comment'>\r\n            {/* Error Panel */}\r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n\r\n            <div className='comment-input-box'>\r\n                <TextArea \r\n                    title='Leave a comment'\r\n                    name='comment-input'\r\n                    limit={5000}\r\n                    cols=\"5000\"\r\n                    rows=\"5\"\r\n                    className='comment-input'\r\n                />\r\n\r\n                <Button \r\n                    className='comment-button'\r\n                    variant=\"secondary\"\r\n                    onClick={!localStorage.id ? () => history.push(\"/reddit-clone-client/signin\") : handleSubmit}>\r\n                        Submit    \r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    comment: state.user.text\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setText: (text) => dispatch(setText(text))\r\n})\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateComment))","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\nimport Votes from '../Votes/Votes';\r\nimport CommentCollection from '../../Comments/CommentCollection/CommentCollection';\r\nimport CreateComment from '../../Comments/CreateComment/CreateComment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Container } from 'react-bootstrap';\r\nimport './Post.css';\r\n\r\n\r\nconst Post = () => {\r\n    //Params\r\n    const { subredditName, postId } = useParams();\r\n\r\n    //Error State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n\r\n    //Post State\r\n    const [postInfo, setPost] = useState({\r\n        postUser: \"\",\r\n        postTitle: \"\",\r\n        postText: \"\",\r\n        postDate: \"\",\r\n        canDelete: false\r\n    })\r\n    const {postUser, postTitle, postText, postDate, canDelete} = postInfo;\r\n\r\n    //useEffect function\r\n    const fetchPost = async (sub, post) => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/post/fetch', {\r\n                method: 'POST',\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    subredditName: sub,\r\n                    postId: post,\r\n                    userId: localStorage.id\r\n                })\r\n            })\r\n\r\n            const parsedRes = await response.json();\r\n            console.log(parsedRes)\r\n            if(response.status !== 200) {\r\n                console.log(parsedRes.message)\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedRes.message\r\n                })\r\n            }\r\n\r\n            const { postUser, postTitle, postText, postDate, canDelete } = parsedRes.body;\r\n            setPost({\r\n                postUser,\r\n                postTitle,\r\n                postText,\r\n                postDate,\r\n                canDelete\r\n            })\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n            throw new Error();\r\n        }\r\n    }\r\n    useEffect(() => fetchPost(subredditName, postId), []);\r\n\r\n    //Delete handler\r\n    const handleDelete = async() => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/post/delete', {\r\n                method: 'POST',\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    userId: localStorage.id,\r\n                    postId\r\n                })\r\n            })\r\n\r\n            const parsedRes = await response.json();\r\n\r\n            if(response.status !== 200) {\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedRes.message\r\n                })\r\n            }\r\n\r\n            console.log(parsedRes.message);\r\n            window.location.reload();\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className='post-component'>\r\n            {/* Error Panel */}\r\n            { error.error ? <ErrorPanel message={error.message} /> : null}\r\n\r\n            <Link className=\"subreddit-link\" to={`/reddit-clone-client/r/${subredditName}`}>{subredditName}</Link>\r\n            <hr className=\"divider\"/>\r\n\r\n            <div className='post-container'>\r\n                <Votes \r\n                    userId={localStorage.id}\r\n                    postId={postId}\r\n                />\r\n\r\n                <div className='post'>\r\n\r\n                    <div className='post-details'>  \r\n                        <p className='post-title'>{postTitle}</p> \r\n                        <div className='post-user-date'>\r\n                            <p className='post-user'>{postUser}</p>\r\n                            <p className='post-date'>{postDate.slice(0, 10) + \" \" + postDate.slice(11, 16)}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='post-body text-area'>\r\n                        <p>\r\n                            {postText}\r\n                        </p>\r\n                    </div>\r\n                    {           \r\n                        canDelete === true ?\r\n                            <p \r\n                                onClick={() => handleDelete()}\r\n                                className='delete-post'>\r\n                                    delete\r\n                            </p>\r\n                        : null\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n            <CreateComment postId={postId}/>\r\n            <CommentCollection postId={postId}/>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./SubredditList.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport ErrorPanel from '../../ErrorPanel/ErrorPanel';\r\n\r\nconst SubredditList = () => {\r\n    //State\r\n    const [error, setError] = useState({error: false, message: ''});\r\n    const [subreddits, setSubreddits] = useState([]);\r\n\r\n    //useEffect Function\r\n    const fetchSubreddits = async() => {\r\n        try {\r\n            const response = await fetch('https://readit-server-1.herokuapp.com/subreddit/list', {\r\n                method: \"GET\",\r\n                headers: {\"Content-Type\": \"application/json\"}\r\n            })\r\n\r\n            const parsedRes = await response.json()\r\n            if(response.status !== 200) {\r\n                return setError({\r\n                    error: true,\r\n                    message: parsedRes.message\r\n                })\r\n            }\r\n            setSubreddits(parsedRes.body)\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n    useEffect(() => fetchSubreddits());\r\n\r\n    return(\r\n        <div className='s-list-box'>\r\n        { error.error ? <ErrorPanel message={error.message} /> : null}\r\n\r\n            <h1>List of subreddits</h1>\r\n\r\n            <div className='s-list-body'>\r\n            {\r\n                subreddits.map((s, i) => (\r\n                    <div className='s-list-element'>\r\n                        <Link\r\n                            className='s-list-link'\r\n                            key={i}\r\n                            to={`/reddit-clone-client/r/${s}`}>\r\n                                {s.title}\r\n                        </Link>\r\n                        <p>{s.info}</p>\r\n                    </div>    \r\n                ))\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubredditList;","import { \r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom';\r\n\r\nimport { Redirect } from 'react-router';\r\n\r\n//Components\r\nimport NavBar from '../components/NavBar/NavBar';\r\nimport Frontpage from '../components/Frontpage/Frontpage';\r\nimport SignUp from '../components/SignUp/SignUp';\r\nimport SignIn from '../components/SignIn/SignIn';\r\nimport Profile from '../components/Profile/Profile';\r\nimport CreatePost from '../components/Posts/CreatePost/CreatePost';\r\nimport Subreddit from '../components/Subreddits/Subreddit/Subreddit';\r\nimport Post from '../components/Posts/Post/Post';\r\nimport SubredditList from '../components/Subreddits/SubredditList/SubredditList';\r\n\r\nconst RootContainer = () => {\r\n    return(\r\n        <Router>\r\n            <Route path='/' component={NavBar} />\r\n            <Switch>\r\n                <Route exact path='/'> {<Redirect to='/reddit-clone-client' />} </Route>\r\n                <Route exact path='/reddit-clone-client' component={Frontpage} />\r\n                <Route exact path='/reddit-clone-client/signup' component={SignUp} />\r\n                <Route exact path='/reddit-clone-client/signin' component={SignIn} />\r\n                <Route exact path=\"/reddit-clone-client/user/:user\" component={Profile}/>\r\n                <Route exact path=\"/reddit-clone-client/submit/:subredditName\" component={CreatePost}/>\r\n                <Route exact path=\"/reddit-clone-client/r/:subredditName\" component={Subreddit} />\r\n                <Route exact path=\"/reddit-clone-client/r/:subredditName/post=:postId\" component={Post} />\r\n                <Route exact path=\"/reddit-clone-client/subreddits\" component={SubredditList} />\r\n            </Switch>\r\n      </Router>\r\n    )\r\n}\r\n\r\nexport default RootContainer;","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\n\n//CSS\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport RootContainer from './containers/RootContainer';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <RootContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}